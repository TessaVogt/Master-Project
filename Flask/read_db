import sqlite3
import matplotlib.pyplot as plt

def get_coordinates_for_letter(letter, font_name):
    # Verbindung zur Datenbank herstellen
    conn = sqlite3.connect('instance/coords.db')
    cursor = conn.cursor()

    # Datenpunkte für den angegebenen Buchstaben abrufen
    cursor.execute(f"SELECT x, y, created_at, new_line FROM creating_font WHERE letter = '{letter}' and font_name = '{font_name}'")
    data = cursor.fetchall()
    # print(data)

    # Verbindung zur Datenbank schließen
    conn.close()

    # Koordinatenpunkte extrahieren
    x_values = [point[0] for point in data]
    y_values = [point[1] for point in data]
    created_at_dates = [point[2] for point in data]
    new_line_values = [point[3] for point in data]

    # extrahiere letzte Eingabe
    num_different_dates = len(set(created_at_dates))
    last_date = max(created_at_dates)

    print(f'Anzahl der verschiedenen Daten: {num_different_dates}')
    print(f'Minimum Datum: {last_date}')

    last_data = [point for point in data if point[2] == last_date]

    last_x_values = [point[0] for point in last_data]
    last_y_values = [point[1] for point in last_data]
    last_created_at_dates = [point[2] for point in last_data]
    last_new_line_values = [point[3] for point in last_data]

    # new_line-Werte ausgeben 
    new_line_indices = [i for i, point in enumerate(last_data) if point[3] == True]
    print(f'new_line-Indices für Buchstabe {letter}: {new_line_indices}')
    return new_line_indices, last_x_values, last_y_values, letter


def plot_subplot(ax, new_line_indices, last_x_values, last_y_values, letter):
    # ax.scatter(last_x_values, last_y_values, label=letter, c='r')
    num_lines = len(new_line_indices)
    if num_lines != []:
        for i in range(num_lines):
            start = new_line_indices[i]
            if i == (num_lines - 1):
                end = len(last_x_values)
            else:
                end = new_line_indices[i+1] - 1
            ax.plot(last_x_values[start:end], last_y_values[start:end], label=letter)
    else:
        ax.plot(last_x_values, last_y_values, label=letter)

    ax.invert_yaxis()  # Hier wird die Y-Achse invertiert
    ax.set_xlabel('X-Koordinate')
    ax.set_ylabel('Y-Koordinate')
    ax.set_title(f'Koordinatenpunkte für Buchstabe {letter}')
    ax.set_ylim(300, -20)
    ax.set_xlim(0, 800)

# Beispiel: Koordinatenpunkte für den Buchstaben 'A' plotten
asciiList = [chr(i) for i in range(33, 36)] + [chr(37), chr(38)] + [chr(i) for i in range(40, 42)] + [chr(i) for i in range(43, 60)] + [chr(i) for i in range(63, 91)] + [chr(95)] + [chr(i) for i in range(97, 123)] + [chr(196), chr(214), chr(220), chr(223), chr(228), chr(246), chr(252)]
for k in range(3):    
    fig, axs = plt.subplots(4, 3, figsize=(15, 10))
    for i, char in enumerate(asciiList[(k*12):((k+1)*12)]):
        new_line_indices, last_x_values, last_y_values, letter = get_coordinates_for_letter(char, 'Test')
        plot_subplot(axs[i//3, i%3], new_line_indices, last_x_values, last_y_values, letter)

    # Platz zwischen den Plots hinzufügen, falls gewünscht
    plt.tight_layout()

    # Zeige den Subplot
    plt.show()
